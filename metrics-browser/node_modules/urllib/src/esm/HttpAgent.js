var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _HttpAgent_checkAddress;
import dns from 'dns';
import { isIP } from 'net';
import { Agent, } from 'undici';
class IllegalAddressError extends Error {
    constructor(hostname, ip, family) {
        const message = 'illegal address';
        super(message);
        this.name = this.constructor.name;
        this.hostname = hostname;
        this.ip = ip;
        this.family = family;
        Error.captureStackTrace(this, this.constructor);
    }
}
export class HttpAgent extends Agent {
    constructor(options) {
        /* eslint node/prefer-promises/dns: off*/
        const _lookup = options.lookup ?? dns.lookup;
        const lookup = (hostname, dnsOptions, callback) => {
            _lookup(hostname, dnsOptions, (err, address, family) => {
                if (err)
                    return callback(err, address, family);
                if (options.checkAddress && !options.checkAddress(address, family)) {
                    err = new IllegalAddressError(hostname, address, family);
                }
                callback(err, address, family);
            });
        };
        super({
            connect: { ...options.connect, lookup },
        });
        _HttpAgent_checkAddress.set(this, void 0);
        __classPrivateFieldSet(this, _HttpAgent_checkAddress, options.checkAddress, "f");
    }
    dispatch(options, handler) {
        if (__classPrivateFieldGet(this, _HttpAgent_checkAddress, "f") && options.origin) {
            const originUrl = typeof options.origin === 'string' ? new URL(options.origin) : options.origin;
            let hostname = originUrl.hostname;
            // [2001:db8:2de::e13] => 2001:db8:2de::e13
            if (hostname.startsWith('[') && hostname.endsWith(']')) {
                hostname = hostname.substring(1, hostname.length - 1);
            }
            const family = isIP(hostname);
            if (family === 4 || family === 6) {
                // if request hostname is ip, custom lookup won't excute
                if (!__classPrivateFieldGet(this, _HttpAgent_checkAddress, "f").call(this, hostname, family)) {
                    throw new IllegalAddressError(hostname, hostname, family);
                }
            }
        }
        return super.dispatch(options, handler);
    }
}
_HttpAgent_checkAddress = new WeakMap();
//# sourceMappingURL=HttpAgent.js.map