{"ast":null,"code":"// digest auth request\n// by Jamie Perkins\n\n// dependent upon CryptoJS MD5 hashing:\n// http://crypto-js.googlecode.com/svn/tags/3.1.2/build/rollups/md5.js\n\n;\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : global.digestAuthRequest = factory();\n})(this, function () {\n  return function (method, url, username, password) {\n    var self = this;\n    if (typeof CryptoJS === 'undefined' && typeof require === 'function') {\n      var CryptoJS = require('crypto-js');\n    }\n    this.scheme = null; // we just echo the scheme, to allow for 'Digest', 'X-Digest', 'JDigest' etc\n    this.nonce = null; // server issued nonce\n    this.realm = null; // server issued realm\n    this.qop = null; // \"quality of protection\" - '' or 'auth' or 'auth-int'\n    this.response = null; // hashed response to server challenge\n    this.opaque = null; // hashed response to server challenge\n    this.nc = 1; // nonce count - increments with each request used with the same nonce\n    this.cnonce = null; // client nonce\n\n    // settings\n    this.timeout = 10000; // timeout\n    this.loggingOn = true; // toggle console logging\n\n    // determine if a post, so that request will send data\n    this.post = false;\n    if (method.toLowerCase() === 'post' || method.toLowerCase() === 'put') {\n      this.post = true;\n    }\n\n    // start here\n    // successFn - will be passed JSON data\n    // errorFn - will be passed error status code\n    // data - optional, for POSTS\n    this.request = function (successFn, errorFn, data) {\n      // posts data as JSON if there is any\n      if (data) {\n        self.data = JSON.stringify(data);\n      }\n      self.successFn = successFn;\n      self.errorFn = errorFn;\n      if (!self.nonce) {\n        self.makeUnauthenticatedRequest(self.data);\n      } else {\n        self.makeAuthenticatedRequest();\n      }\n    };\n    this.makeUnauthenticatedRequest = function (data) {\n      self.firstRequest = new XMLHttpRequest();\n      self.firstRequest.open(method, url, true);\n      self.firstRequest.timeout = self.timeout;\n      // if we are posting, add appropriate headers\n      if (self.post) {\n        self.firstRequest.setRequestHeader('Content-type', 'application/json');\n      }\n      self.firstRequest.onreadystatechange = function () {\n        // 2: received headers,  3: loading, 4: done\n        if (self.firstRequest.readyState === 2) {\n          var responseHeaders = self.firstRequest.getAllResponseHeaders();\n          responseHeaders = responseHeaders.split('\\n');\n          // get authenticate header\n          var digestHeaders;\n          for (var i = 0; i < responseHeaders.length; i++) {\n            if (responseHeaders[i].match(/www-authenticate/i) != null) {\n              digestHeaders = responseHeaders[i];\n            }\n          }\n          if (digestHeaders != null) {\n            // parse auth header and get digest auth keys\n            digestHeaders = digestHeaders.slice(digestHeaders.indexOf(':') + 1, -1);\n            digestHeaders = digestHeaders.split(',');\n            self.scheme = digestHeaders[0].split(/\\s/)[1];\n            for (var i = 0; i < digestHeaders.length; i++) {\n              var equalIndex = digestHeaders[i].indexOf('='),\n                key = digestHeaders[i].substring(0, equalIndex),\n                val = digestHeaders[i].substring(equalIndex + 1);\n              val = val.replace(/['\"]+/g, '');\n              // find realm\n              if (key.match(/realm/i) != null) {\n                self.realm = val;\n              }\n              // find nonce\n              if (key.match(/nonce/i) != null) {\n                self.nonce = val;\n              }\n              // find opaque\n              if (key.match(/opaque/i) != null) {\n                self.opaque = val;\n              }\n              // find QOP\n              if (key.match(/qop/i) != null) {\n                self.qop = val;\n              }\n            }\n            // client generated keys\n            self.cnonce = self.generateCnonce();\n            self.nc++;\n            // if logging, show headers received:\n            self.log('received headers:');\n            self.log('\trealm: ' + self.realm);\n            self.log('\tnonce: ' + self.nonce);\n            self.log('\topaque: ' + self.opaque);\n            self.log('\tqop: ' + self.qop);\n            // now we can make an authenticated request\n\n            self.makeAuthenticatedRequest();\n          }\n        }\n        if (self.firstRequest.readyState === 4) {\n          if (self.firstRequest.status === 200) {\n            self.log('Authentication not required for ' + url);\n            if (self.firstRequest.responseText !== 'undefined') {\n              if (self.firstRequest.responseText.length > 0) {\n                // If JSON, parse and return object\n                if (self.isJson(self.firstRequest.responseText)) {\n                  self.successFn(JSON.parse(self.firstRequest.responseText));\n                } else {\n                  self.successFn(self.firstRequest.responseText);\n                }\n              }\n            } else {\n              self.successFn();\n            }\n          }\n        }\n      };\n      // send\n      if (self.post) {\n        // in case digest auth not required\n        self.firstRequest.send(self.data);\n      } else {\n        self.firstRequest.send();\n      }\n      self.log('Unauthenticated request to ' + url);\n\n      // handle error\n      self.firstRequest.onerror = function () {\n        if (self.firstRequest.status !== 401) {\n          self.log('Error (' + self.firstRequest.status + ') on unauthenticated request to ' + url);\n          self.errorFn(self.firstRequest.status);\n        }\n      };\n    };\n    this.makeAuthenticatedRequest = function () {\n      self.response = self.formulateResponse();\n      self.authenticatedRequest = new XMLHttpRequest();\n      self.authenticatedRequest.open(method, url, true);\n      self.authenticatedRequest.timeout = self.timeout;\n      var digestAuthHeader = self.scheme + ' ' + 'username=\"' + username + '\", ' + 'realm=\"' + self.realm + '\", ' + 'nonce=\"' + self.nonce + '\", ' + 'uri=\"' + url + '\", ' + 'response=\"' + self.response + '\", ' + 'opaque=\"' + self.opaque + '\", ' + 'qop=' + self.qop + ', ' + 'nc=' + ('00000000' + self.nc).slice(-8) + ', ' + 'cnonce=\"' + self.cnonce + '\"';\n      self.authenticatedRequest.setRequestHeader('Authorization', digestAuthHeader);\n      self.log('digest auth header response to be sent:');\n      self.log(digestAuthHeader);\n      // if we are posting, add appropriate headers\n      if (self.post) {\n        self.authenticatedRequest.setRequestHeader('Content-type', 'application/json');\n      }\n      self.authenticatedRequest.onload = function () {\n        // success\n        if (self.authenticatedRequest.status >= 200 && self.authenticatedRequest.status < 400) {\n          // increment nonce count\n          self.nc++;\n          // return data\n          if (self.authenticatedRequest.responseText !== 'undefined' && self.authenticatedRequest.responseText.length > 0) {\n            // If JSON, parse and return object\n            if (self.isJson(self.authenticatedRequest.responseText)) {\n              self.successFn(JSON.parse(self.authenticatedRequest.responseText));\n            } else {\n              self.successFn(self.authenticatedRequest.responseText);\n            }\n          } else {\n            self.successFn();\n          }\n        }\n        // failure\n        else {\n          self.nonce = null;\n          self.errorFn(self.authenticatedRequest.status);\n        }\n      };\n      // handle errors\n      self.authenticatedRequest.onerror = function () {\n        self.log('Error (' + self.authenticatedRequest.status + ') on authenticated request to ' + url);\n        self.nonce = null;\n        self.errorFn(self.authenticatedRequest.status);\n      };\n      // send\n      if (self.post) {\n        self.authenticatedRequest.send(self.data);\n      } else {\n        self.authenticatedRequest.send();\n      }\n      self.log('Authenticated request to ' + url);\n    };\n    // hash response based on server challenge\n    this.formulateResponse = function () {\n      var HA1 = CryptoJS.MD5(username + ':' + self.realm + ':' + password).toString();\n      var HA2 = CryptoJS.MD5(method + ':' + url).toString();\n      var response = CryptoJS.MD5(HA1 + ':' + self.nonce + ':' + ('00000000' + self.nc).slice(-8) + ':' + self.cnonce + ':' + self.qop + ':' + HA2).toString();\n      return response;\n    };\n    // generate 16 char client nonce\n    this.generateCnonce = function () {\n      var characters = 'abcdef0123456789';\n      var token = '';\n      for (var i = 0; i < 16; i++) {\n        var randNum = Math.round(Math.random() * characters.length);\n        token += characters.substr(randNum, 1);\n      }\n      return token;\n    };\n    this.abort = function () {\n      self.log('[digestAuthRequest] Aborted request to ' + url);\n      if (self.firstRequest != null) {\n        if (self.firstRequest.readyState != 4) self.firstRequest.abort();\n      }\n      if (self.authenticatedRequest != null) {\n        if (self.authenticatedRequest.readyState != 4) self.authenticatedRequest.abort();\n      }\n    };\n    this.isJson = function (str) {\n      try {\n        JSON.parse(str);\n      } catch (e) {\n        return false;\n      }\n      return true;\n    };\n    this.log = function (str) {\n      if (self.loggingOn) {\n        console.log('[digestAuthRequest] ' + str);\n      }\n    };\n    this.version = function () {\n      return '0.6.1';\n    };\n  };\n});","map":{"version":3,"names":["global","factory","exports","module","digestAuthRequest","method","url","username","password","self","CryptoJS","require","scheme","nonce","realm","qop","response","opaque","nc","cnonce","timeout","loggingOn","post","toLowerCase","request","successFn","errorFn","data","JSON","stringify","makeUnauthenticatedRequest","makeAuthenticatedRequest","firstRequest","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","responseHeaders","getAllResponseHeaders","split","digestHeaders","i","length","match","slice","indexOf","equalIndex","key","substring","val","replace","generateCnonce","log","status","responseText","isJson","parse","send","onerror","formulateResponse","authenticatedRequest","digestAuthHeader","onload","HA1","MD5","toString","HA2","characters","token","randNum","Math","round","random","substr","abort","str","e","console","version"],"sources":["/Users/xiaoyu.xu/mongo/MetricsBrowser/metrics-browser/node_modules/digest-auth-request/digestAuthRequest.js"],"sourcesContent":["// digest auth request\n// by Jamie Perkins\n\n// dependent upon CryptoJS MD5 hashing:\n// http://crypto-js.googlecode.com/svn/tags/3.1.2/build/rollups/md5.js\n\n;(function(global, factory) {\n        typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n        global.digestAuthRequest = factory()\n}(this, function() {\n        return function(method, url, username, password) {\n                var self = this;\n\n                if (typeof CryptoJS === 'undefined' && typeof require === 'function') {\n                  var CryptoJS = require('crypto-js');\n                }\n\n                this.scheme = null; // we just echo the scheme, to allow for 'Digest', 'X-Digest', 'JDigest' etc\n                this.nonce = null; // server issued nonce\n                this.realm = null; // server issued realm\n                this.qop = null; // \"quality of protection\" - '' or 'auth' or 'auth-int'\n                this.response = null; // hashed response to server challenge\n                this.opaque = null; // hashed response to server challenge\n                this.nc = 1; // nonce count - increments with each request used with the same nonce\n                this.cnonce = null; // client nonce\n\n                // settings\n                this.timeout = 10000; // timeout\n                this.loggingOn = true; // toggle console logging\n\n                // determine if a post, so that request will send data\n                this.post = false;\n                if (method.toLowerCase() === 'post' || method.toLowerCase() === 'put') {\n                        this.post = true;\n                }\n\n                // start here\n                // successFn - will be passed JSON data\n                // errorFn - will be passed error status code\n                // data - optional, for POSTS\n                this.request = function(successFn, errorFn, data) {\n                        // posts data as JSON if there is any\n                        if (data) {\n                                self.data = JSON.stringify(data);\n                        }\n                        self.successFn = successFn;\n                        self.errorFn = errorFn;\n\n                        if (!self.nonce) {\n                                self.makeUnauthenticatedRequest(self.data);\n                        } else {\n                                self.makeAuthenticatedRequest();\n                        }\n                }\n                this.makeUnauthenticatedRequest = function(data) {\n                        self.firstRequest = new XMLHttpRequest();\n                        self.firstRequest.open(method, url, true);\n                        self.firstRequest.timeout = self.timeout;\n                        // if we are posting, add appropriate headers\n                        if (self.post) {\n                                self.firstRequest.setRequestHeader('Content-type', 'application/json');\n                        }\n\n                        self.firstRequest.onreadystatechange = function() {\n\n                                // 2: received headers,  3: loading, 4: done\n                                if (self.firstRequest.readyState === 2) {\n\n                                        var responseHeaders = self.firstRequest.getAllResponseHeaders();\n                                        responseHeaders = responseHeaders.split('\\n');\n                                        // get authenticate header\n                                        var digestHeaders;\n                                        for(var i = 0; i < responseHeaders.length; i++) {\n                                                if (responseHeaders[i].match(/www-authenticate/i) != null) {\n                                                        digestHeaders = responseHeaders[i];\n                                                }\n                                        }\n\n                                        if (digestHeaders != null) {\n                                                // parse auth header and get digest auth keys\n                                                digestHeaders = digestHeaders.slice(digestHeaders.indexOf(':') + 1, -1);\n                                                digestHeaders = digestHeaders.split(',');\n                                                self.scheme = digestHeaders[0].split(/\\s/)[1];\n                                                for (var i = 0; i < digestHeaders.length; i++) {\n                                                        var equalIndex = digestHeaders[i].indexOf('='),\n                                                                key = digestHeaders[i].substring(0, equalIndex),\n                                                                val = digestHeaders[i].substring(equalIndex + 1);\n                                                        val = val.replace(/['\"]+/g, '');\n                                                        // find realm\n                                                        if (key.match(/realm/i) != null) {\n                                                                self.realm = val;\n                                                        }\n                                                        // find nonce\n                                                        if (key.match(/nonce/i) != null) {\n                                                                self.nonce = val;\n                                                        }\n                                                        // find opaque\n                                                        if (key.match(/opaque/i) != null) {\n                                                                self.opaque = val;\n                                                        }\n                                                        // find QOP\n                                                        if (key.match(/qop/i) != null) {\n                                                                self.qop = val;\n                                                        }\n                                                }\n                                                // client generated keys\n                                                self.cnonce = self.generateCnonce();\n                                                self.nc++;\n                                                // if logging, show headers received:\n                                                self.log('received headers:');\n                                                self.log('\trealm: '+self.realm);\n                                                self.log('\tnonce: '+self.nonce);\n                                                self.log('\topaque: '+self.opaque);\n                                                self.log('\tqop: '+self.qop);\n                                                // now we can make an authenticated request\n\n                                                self.makeAuthenticatedRequest();\n                                        }\n                                }\n                                if (self.firstRequest.readyState === 4) {\n                                        if (self.firstRequest.status === 200) {\n                                                self.log('Authentication not required for '+url);\n                                                if (self.firstRequest.responseText !== 'undefined') {\n                                                        if (self.firstRequest.responseText.length > 0) {\n                                                                // If JSON, parse and return object\n                                                                if (self.isJson(self.firstRequest.responseText)) {\n                                                                        self.successFn(JSON.parse(self.firstRequest.responseText));\n                                                                } else {\n                                                                        self.successFn(self.firstRequest.responseText);\n                                                                }\n                                                        }\n                                                } else {\n                                                        self.successFn();\n                                                }\n                                        }\n                                }\n                        }\n                        // send\n                        if (self.post) {\n                                // in case digest auth not required\n                                self.firstRequest.send(self.data);\n                        } else {\n                                self.firstRequest.send();\n                        }\n                        self.log('Unauthenticated request to '+url);\n\n                        // handle error\n                        self.firstRequest.onerror = function() {\n                                if (self.firstRequest.status !== 401) {\n                                        self.log('Error ('+self.firstRequest.status+') on unauthenticated request to '+url);\n                                        self.errorFn(self.firstRequest.status);\n                                }\n                        }\n\n                }\n                this.makeAuthenticatedRequest= function() {\n\n                        self.response = self.formulateResponse();\n\n                        self.authenticatedRequest = new XMLHttpRequest();\n                        self.authenticatedRequest.open(method, url, true);\n                        self.authenticatedRequest.timeout = self.timeout;\n                        var digestAuthHeader = self.scheme+' '+\n                                'username=\"'+username+'\", '+\n                                'realm=\"'+self.realm+'\", '+\n                                'nonce=\"'+self.nonce+'\", '+\n                                'uri=\"'+url+'\", '+\n                                'response=\"'+self.response+'\", '+\n                                'opaque=\"'+self.opaque+'\", '+\n                                'qop='+self.qop+', '+\n                                'nc='+('00000000' + self.nc).slice(-8)+', '+\n                                'cnonce=\"'+self.cnonce+'\"';\n                        self.authenticatedRequest.setRequestHeader('Authorization', digestAuthHeader);\n                        self.log('digest auth header response to be sent:');\n                        self.log(digestAuthHeader);\n                        // if we are posting, add appropriate headers\n                        if (self.post) {\n                                self.authenticatedRequest.setRequestHeader('Content-type', 'application/json');\n                        }\n                        self.authenticatedRequest.onload = function() {\n                                // success\n                                if (self.authenticatedRequest.status >= 200 && self.authenticatedRequest.status < 400) {\n                                        // increment nonce count\n                                        self.nc++;\n                                        // return data\n                                        if (self.authenticatedRequest.responseText !== 'undefined' && self.authenticatedRequest.responseText.length > 0 ) {\n                                                // If JSON, parse and return object\n                                                if (self.isJson(self.authenticatedRequest.responseText)) {\n                                                        self.successFn(JSON.parse(self.authenticatedRequest.responseText));\n                                                } else {\n                                                        self.successFn(self.authenticatedRequest.responseText);\n                                                }\n                                        } else {\n                                                self.successFn();\n                                        }\n                                }\n                                // failure\n                                else {\n                                        self.nonce = null;\n                                        self.errorFn(self.authenticatedRequest.status);\n                                }\n                        }\n                        // handle errors\n                        self.authenticatedRequest.onerror = function() {\n                                self.log('Error ('+self.authenticatedRequest.status+') on authenticated request to '+url);\n                                self.nonce = null;\n                                self.errorFn(self.authenticatedRequest.status);\n                        };\n                        // send\n                        if (self.post) {\n                                self.authenticatedRequest.send(self.data);\n                        } else {\n                                self.authenticatedRequest.send();\n                        }\n                        self.log('Authenticated request to '+url);\n                }\n                // hash response based on server challenge\n                this.formulateResponse = function() {\n                        var HA1 = CryptoJS.MD5(username+':'+self.realm+':'+password).toString();\n                        var HA2 = CryptoJS.MD5(method+':'+url).toString();\n                        var response = CryptoJS.MD5(HA1+':'+\n                                self.nonce+':'+\n                                ('00000000' + self.nc).slice(-8)+':'+\n                                self.cnonce+':'+\n                                self.qop+':'+\n                                HA2).toString();\n                        return response;\n                }\n                // generate 16 char client nonce\n                this.generateCnonce = function() {\n                        var characters = 'abcdef0123456789';\n                        var token = '';\n                        for (var i = 0; i < 16; i++) {\n                                var randNum = Math.round(Math.random() * characters.length);\n                                token += characters.substr(randNum, 1);\n                        }\n                        return token;\n                }\n                this.abort = function() {\n                        self.log('[digestAuthRequest] Aborted request to '+url);\n                        if (self.firstRequest != null) {\n                                if (self.firstRequest.readyState != 4) self.firstRequest.abort();\n                        }\n                        if (self.authenticatedRequest != null) {\n                                if (self.authenticatedRequest.readyState != 4) self.authenticatedRequest.abort();\n                        }\n                }\n                this.isJson = function(str) {\n                    try {\n                        JSON.parse(str);\n                    } catch (e) {\n                        return false;\n                    }\n                    return true;\n                }\n                this.log = function(str) {\n                        if (self.loggingOn) {\n                                console.log('[digestAuthRequest] '+str);\n                        }\n                }\n                this.version = function() { return '0.6.1' }\n        }\n}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}