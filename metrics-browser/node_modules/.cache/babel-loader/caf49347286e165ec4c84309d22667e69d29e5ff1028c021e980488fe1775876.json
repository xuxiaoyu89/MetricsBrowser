{"ast":null,"code":"var _jsxFileName = \"/Users/xiaoyu.xu/mongo/MetricsBrowser/metrics-browser/src/ChartsPanel.js\";\nimport \"./ChartsPanel.css\";\nimport { Component } from 'react';\nimport Dygraph from 'dygraphs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass ChartsPanel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      measurements: this.props.measurements\n    };\n  }\n  render() {\n    const chartContainers = [];\n    this.state.measurements.forEach(measurement => {\n      chartContainers.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        id: measurement.name,\n        className: \"chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 34\n      }, this));\n    });\n    return chartContainers;\n  }\n  componentDidMount() {\n    this.state.measurements.forEach(measurement => {\n      new Dygraph(document.getElementById(measurement.name),\n      // For possible data formats, see http://dygraphs.com/data.html\n      // The x-values could also be dates, e.g. \"2012/03/15\"\n      measurement.dataPoints.map(entry => [Date.parse(entry.timestamp), entry.value]), {\n        // options go here. See http://dygraphs.com/options.html\n        // legend: 'always',\n        animatedZooms: true,\n        title: measurement.name\n      });\n    });\n  }\n}\nexport default ChartsPanel;","map":{"version":3,"names":["Component","Dygraph","jsxDEV","_jsxDEV","ChartsPanel","constructor","props","state","measurements","render","chartContainers","forEach","measurement","push","id","name","className","fileName","_jsxFileName","lineNumber","columnNumber","componentDidMount","document","getElementById","dataPoints","map","entry","Date","parse","timestamp","value","animatedZooms","title"],"sources":["/Users/xiaoyu.xu/mongo/MetricsBrowser/metrics-browser/src/ChartsPanel.js"],"sourcesContent":["import \"./ChartsPanel.css\"\nimport { Component } from 'react';\nimport Dygraph from 'dygraphs';\n\nclass ChartsPanel extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            measurements: this.props.measurements\n        };\n    }\n\n    render() {\n        const chartContainers = [];\n        this.state.measurements.forEach(measurement => {\n            chartContainers.push(<div id={measurement.name} className=\"chart\"></div>);\n        });\n\n        return chartContainers;\n    }\n\n    componentDidMount() {\n        this.state.measurements.forEach(measurement => {\n            new Dygraph(\n                document.getElementById(measurement.name),\n                // For possible data formats, see http://dygraphs.com/data.html\n                // The x-values could also be dates, e.g. \"2012/03/15\"\n                measurement.dataPoints.map(entry => [Date.parse(entry.timestamp), entry.value]),\n                {\n                    // options go here. See http://dygraphs.com/options.html\n                    // legend: 'always',\n                    animatedZooms: true,\n                    title: measurement.name\n                });\n        });\n    }\n\n}\n\nexport default ChartsPanel;"],"mappings":";AAAA,OAAO,mBAAmB;AAC1B,SAASA,SAAS,QAAQ,OAAO;AACjC,OAAOC,OAAO,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,WAAW,SAASJ,SAAS,CAAC;EAChCK,WAAWA,CAACC,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,KAAK,GAAG;MACTC,YAAY,EAAE,IAAI,CAACF,KAAK,CAACE;IAC7B,CAAC;EACL;EAEAC,MAAMA,CAAA,EAAG;IACL,MAAMC,eAAe,GAAG,EAAE;IAC1B,IAAI,CAACH,KAAK,CAACC,YAAY,CAACG,OAAO,CAACC,WAAW,IAAI;MAC3CF,eAAe,CAACG,IAAI,eAACV,OAAA;QAAKW,EAAE,EAAEF,WAAW,CAACG,IAAK;QAACC,SAAS,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAO,CAAC;IAC7E,CAAC,CAAC;IAEF,OAAOV,eAAe;EAC1B;EAEAW,iBAAiBA,CAAA,EAAG;IAChB,IAAI,CAACd,KAAK,CAACC,YAAY,CAACG,OAAO,CAACC,WAAW,IAAI;MAC3C,IAAIX,OAAO,CACPqB,QAAQ,CAACC,cAAc,CAACX,WAAW,CAACG,IAAI,CAAC;MACzC;MACA;MACAH,WAAW,CAACY,UAAU,CAACC,GAAG,CAACC,KAAK,IAAI,CAACC,IAAI,CAACC,KAAK,CAACF,KAAK,CAACG,SAAS,CAAC,EAAEH,KAAK,CAACI,KAAK,CAAC,CAAC,EAC/E;QACI;QACA;QACAC,aAAa,EAAE,IAAI;QACnBC,KAAK,EAAEpB,WAAW,CAACG;MACvB,CAAC,CAAC;IACV,CAAC,CAAC;EACN;AAEJ;AAEA,eAAeX,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}